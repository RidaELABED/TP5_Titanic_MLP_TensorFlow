# -*- coding: utf-8 -*-
"""MLP_Titanic_Rida_Maxime_Part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AaJ9W1-iSOncB4aKVyHbeKIpOJPqitF5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import Perceptron
from sklearn.metrics import classification_report, accuracy_score, log_loss
from sklearn.decomposition import PCA
import time

data =  pd.read_csv('/content/train.csv',sep=",")

data.head()

data['Sex'] = data['Sex'].replace(['male'],1)
data['Sex'] = data['Sex'].replace(['female'],2)

data['Embarked'] = data['Embarked'].replace(['S'],1)
data['Embarked'] = data['Embarked'].replace(['C'],2)
data['Embarked'] = data['Embarked'].replace(['Q'],3)

data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\.', expand=False)

print(data['Title'].unique())

data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr','Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Speciaux')
data['Title'] = data['Title'].replace('Mlle', 'Miss')
data['Title'] = data['Title'].replace('Ms', 'Miss')
data['Title'] = data['Title'].replace('Mme', 'Mrs')

data['Title'] = data['Title'].replace(['Mr'],1)
data['Title'] = data['Title'].replace(['Mrs'],2)
data['Title'] = data['Title'].replace(['Miss'],3)
data['Title'] = data['Title'].replace(['Master'],4)
data['Title'] = data['Title'].replace(['Speciaux'],5)

data = data.drop(['Cabin','Embarked','Name','Ticket','PassengerId'],axis = 1)

x = data.drop("Survived", axis = 1)
x.head()

data = data.dropna(axis=0)

ax = sns.histplot(data["Pclass"])
plt.show()
ax2 = sns.histplot(data["Age"])
plt.show()
ax2 = sns.histplot(data["Fare"])
plt.show()
ax2 = sns.histplot(data["Embarked"])
plt.show()
ax2 = sns.histplot(data["Sex"])
plt.show()
ax2 = sns.histplot(data["SibSp"])
plt.show()
ax2 = sns.histplot(data["Parch"])
plt.show()
ax2 = sns.histplot(data["Title"])
plt.show()

x = data.drop("Survived", axis = 1)
x.head()

x.isnull().T.any().T.sum()
nan_rows = x[x.isnull().T.any()]
print(nan_rows)



x.shape

y = data['Survived']

y.shape

'''
x['Age'] = x['Age'].fillna(round(x['Age'].mean()))
x['Embarked'] = x['Embarked'].fillna(round(x['Embarked'].mean()))
'''

'''
xtestdf['Age'] = xtestdf['Age'].fillna(round(xtestdf['Age'].mean()))
xtestdf['Embarked'] = xtestdf['Embarked'].fillna(round(xtestdf['Embarked'].mean()))
'''

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
sc = StandardScaler()
mm =MinMaxScaler()
xtrainSca = sc.fit_transform(xtrain)
xtestSca = sc.fit_transform(xtest)
xtrainSca2 = mm.fit_transform(xtrain)
xtestSca2 = mm.fit_transform(xtest)

data.head()

#ALL TIME HIGH
start_time = time.time()

clf = MLPClassifier(solver='adam',hidden_layer_sizes=(45,16,),
                                     random_state=0).fit(xtrain,ytrain)

end_time = time.time()
print("temps ecoule = "+str(end_time - start_time))
print("le score de classification est", clf.score(xtest,ytest))

start_time = time.time()

clf = MLPClassifier(solver='adam',hidden_layer_sizes=(45,16,),
                                     random_state=0).fit(xtrain,ytrain)

end_time = time.time()
print("temps ecoule = "+str(end_time - start_time))
print("le score de classification est", clf.score(xtest,ytest))

xtest.shape

mlp = MLPClassifier()
parameters = {
    'solver':['lbfgs','adam'],
    'hidden_layer_sizes': [(10,), (50,), (100,),(500,),(100,100),(250,250),(500,250),(500,300,150)],
    'activation': ['relu', 'tanh', 'logistic','identity'],
    'learning_rate': ['constant', 'invscaling', 'adaptive']
}
 
cv = GridSearchCV(mlp, parameters, cv=5)
cv.fit(xtrain,ytrain)

print(cv.best_params_)

print(cv.score(xtest,ytest))

data.head()

